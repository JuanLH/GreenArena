/*
 * TeamsAndScoresPane.java
 *
 * Created on 7 January 2008, 19:16
 */
package sydneyengine.ui;

//import sydneyengine.superserializable.*;
import java.util.ArrayList;

import javax.swing.JInternalFrame;
import javax.swing.event.TableModelEvent;
import javax.swing.table.AbstractTableModel;

import sydneyengine.shooter.Player;
import sydneyengine.shooter.ViewPane;

/**
 *
 * @author  CommanderKeith
 */
public class TeamsAndScoresPane extends javax.swing.JPanel implements Updatable{

	ViewPane v;
	JInternalFrame f;
	TeamTableModel model;

	/** Creates new form TeamsAndScoresPane */
	public TeamsAndScoresPane(final ViewPane v, final JInternalFrame f) {
		this.v = v;
		this.f = f;
		initComponents();
		model = new TeamTableModel(v.getWorld().getPlayers());
		playersTable.setModel(model);
	}
	
	@Override
	public void doMove(double seconds, double timeAtStartOfMoveSeconds){
		playersTable.tableChanged(new TableModelEvent(playersTable.getModel()));
		playersTable.revalidate();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        returnToGameButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        playersTable = new javax.swing.JTable();
        switchTeamButton = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 36));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Defiance"); // NOI18N

        returnToGameButton.setText("Return to game"); // NOI18N
        returnToGameButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToGameButtonreturnToGame(evt);
            }
        });

        playersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jScrollPane1.setViewportView(playersTable);

        switchTeamButton.setText("Switch team"); // NOI18N
        switchTeamButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchTeamButtonreturnToGame(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, switchTeamButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, returnToGameButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(switchTeamButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(returnToGameButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
	class TeamTableModel extends AbstractTableModel {

		ArrayList<Player> players;
		protected int lastReturnedValueOfGetRowCount;

		public TeamTableModel(ArrayList<Player> players) {
			this.players = players;
		}

		@Override
		public String getColumnName(int col) {
			if (col == 0) {
				return "Player";
			} else if (col == 1) {
				return "Team";
			} else if (col == 2) {
				return "Kills";
			} else if (col == 3) {
				return "Assists";
			}else if (col == 4) {
				return "Flags";
			} else if (col == 5) {
				return "Deaths";
			} else {
				return "Latency(ms)";
			}
		}

		@Override
		public int getRowCount() {
			lastReturnedValueOfGetRowCount = players.size();
			return players.size();
		}

		@Override
		public int getColumnCount() {
			return 6;
		}

		@Override
		public Object getValueAt(int row, int col) {
			if (col == 0) {
				return getPlayers().get(row).getName();
			} else if (col == 1) {
				return getPlayers().get(row).getTeam().getName();
			} else if (col == 2) {
				return getPlayers().get(row).getKills();
			} else if (col == 3) {
				return getPlayers().get(row).getAssists();
			} else if (col == 4) {
				return getPlayers().get(row).getFlagCaptures();
			} else  if (col == 5) {
				return getPlayers().get(row).getDeaths();
			} else{
				return (getPlayers().get(row).getLatencyToServerNanos()/1000000);
			}
		}

		@Override
		public boolean isCellEditable(int row, int col) {
			return false;
		}

		@Override
		public Class getColumnClass(int c) {
			Object theObject = getValueAt(0, c);
			return theObject.getClass();
		}

		@Override
		public void setValueAt(Object value, int row, int col) {
		//rowData[row][col] = value;
		//fireTableCellUpdated(row, col);
		}

		public ArrayList<Player> getPlayers() {
			return players;
		}

		public void setPlayers(ArrayList<Player> players) {
			this.players = players;
		}

		public int getLastReturnedValueOfGetRowCount() {
			return lastReturnedValueOfGetRowCount;
		}
	}

	private void returnToGameButtonreturnToGame(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnToGameButtonreturnToGame
		v.getGameFrame().getDesktopPane().remove(f);
		f.dispose();
		v.requestFocus();
	}//GEN-LAST:event_returnToGameButtonreturnToGame

	private void switchTeamButtonreturnToGame(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchTeamButtonreturnToGame
		// accessing the game world and its members here on the EDT is not thread-safe 
		// since the number of teams could be changed in the Controller thread at any moment, 
		// but it should generally be OK...
//		GameWorld world = v.getGameFrame().getController().getWorld();
//		Team newTeam = null;
//		int nextTeamIndex = world.getTeams().indexOf(v.getPlayer().getTeam());
//		// get the next team in the list, unless it's the Nature team.
//		while (true) {
//			nextTeamIndex = (nextTeamIndex + 1 > world.getTeams().size() - 1 ? 0 : nextTeamIndex + 1);
//			newTeam = (Team) world.getTeams().get(nextTeamIndex);
//			if (newTeam.getName().equals(Team.NATURE_TEAM_NAME) == false) {
//				//System.out.println(this.getClass().getSimpleName() + ": breaking.");
//				break;
//			}
//		}
//		ChangeTeamEvent playerMouseEvent = new ChangeTeamEvent(v.getPlayer(), newTeam);
//		v.sendEvent(playerMouseEvent);
}//GEN-LAST:event_switchTeamButtonreturnToGame
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable playersTable;
    private javax.swing.JButton returnToGameButton;
    private javax.swing.JButton switchTeamButton;
    // End of variables declaration//GEN-END:variables
}
